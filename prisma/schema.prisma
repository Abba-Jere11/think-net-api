// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  
  @@map("schools")
}

model Contact {
  id         String   @id @default(cuid())
  name       String
  email      String
  phone      String
  department String
  level      String
  priority   String
  request    String
  subject    String
  desc       String
  employeeId String @unique
  createdAt  DateTime @default(now())

  @@map("contacts")
}

enum Role {
  MANAGEMENT
  STAFF
  PARENT
  ADMIN
  SUPER_ADMIN
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  password String
  name     String
  role     Role
  phone    String?
  image    String?
  announcements Announcement[]

  refreshTokens RefreshToken[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One-to-one relationships
  management Management?
  staff      Staff?
  parent     Parent?
  

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Staff {
  id          String   @id @default(cuid())
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstname   String
  lastname    String
  email       String   @unique
  phone       String?
  dob         DateTime
  gender      String
  address     String?
  department  String
  nin         String?  // National Identification Number
  religion    String?
  password    String
  imageUrl    String?
  startingDate DateTime?
  description String?
  stateOfOrigin String?
  lga         String?
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  @@map("staffs")
}
model Parent {
  id          String   @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstname   String
  lastname    String
  email       String   @unique
  phone       String?
  dob         String
  gender      String
  address     String?
  department  String
  nin         String?  // National Identification Number
  religion    String?
  password    String
  imageUrl    String?
  startingDate String
  description String?
  stateOfOrigin String?
  lga         String?
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("parents")
}

model Announcement {
  id          String      @id @default(cuid())
  title       String
  content     String
  type        String   // 'info', 'warning', 'announcement'
  priority    String   // 'High', 'Medium', 'Low'
  department  String
  author      String?
  publishDate DateTime @default(now())
  isActive Boolean @default(true)  // Make sure this line exists
  authorId    String?
  expiryDate  DateTime?
  status      String   @default("Draft") // 'Published', 'Draft', 'Scheduled'
  views       Int      @default(0)
  isUrgent    Boolean  @default(false)
  isPinned    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [authorId], references: [id])

  @@map("announcements")
}

model Management {
  id            String    @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  firstName     String
  lastName      String
  email         String    @unique
  phone         String
  dob           String
  gender        String
  imageUrl      String?
  password      String?
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  employeeId    String    @unique
  dateOfJoining String
  address       String?
  stateOrigin   String?
  lga           String?
  experience    String?
  department    String
  
  
  
  @@map("managements")
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  description String?
  location    String?
  manager     String
  managerId       String
  established String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationship - one department can have one head of department
  
  
  @@map("departments")
}